#!/bin/bash
esc=$(printf '\033')
yellow="$esc[33;1m"
red="$esc[31;1m"
purple="$esc[35;1m" bold="$esc[37;1m" reset="$esc[0m"

main__(){
while (( $# > 0 )); do
  rest=${@:2}
  case $1 in
  help    ) show_help; exit 0 ;; # show help for commands
  init    ) # install docker and docker-compose on ubuntu ( must be run as sudo )
            sudo bash -c "$(declare -f install_docker); install_docker $(whoami)" ;;
  dc      ) docker-compose $rest; exit ;; # docker-compose [...args]
  da      ) docker-compose run --rm web django-admin $rest; exit ;; # django-admin [...args]

  dumpdb  ) dump_db ;;  # dump postgresql database
  loaddb  ) load_db $rest; exit;;  # load database from dump file [filename]

  enable  ) enable_service ;; # enable systemd service file for web server - starts all docker images
  djbuild ) build_django ;;   # download and build all images, migrate database

  webpack ) docker-compose run --rm webpack ${rest:-bash}; exit;;
  build   ) webpack_build ;; # build webpack

  npmi    ) docker-compose run --rm webpack install $rest; exit ;; # npm install [packages...]
  npmup   ) docker-compose run --rm webpack update ;; # npm update js packages
  storyb  ) docker-compose run --rm --name storybook -p 9001:9001 webpack storybook ;;  # start storybook on port 9001
  storybb ) # build storybook
    rm -r docs/
    docker-compose run --rm webpack npm run build-storybook;
    mv webpack/docs/ docs/ ;;
  pyup    ) cd django; pip-compile --upgrade ;; # pip update python packages

  repl    ) docker-compose run --rm web django-admin shell_plus --quiet-load ;; # django repl shell
  django  ) docker-compose run --rm -u django web ${rest:-bash}; exit ;;
  root    ) docker-compose run --rm           web ${rest:-bash}; exit ;;

  pytest  ) testing; docker-compose run --rm --name testf -u django web pytest -f -x --ff $rest; exit ;;

  flower  ) docker-compose run --rm --name flower -d -p 5555:5555 celery flower ;;  # start celery flower on port 5555
  jupyter ) start_jupyter ;;  # start jupyter server for django on port 8888

  fake    ) docker-compose run --rm web django-admin fake_content -c10 -s50 ;;  # create fake data in django database
  static  ) collect_static_files --ignore ;;  # run django collectstatic
  migrate ) docker-compose run --rm web django-admin migrate ;;  # migrate django apps

  upd     ) docker-compose up -d ;;  # start all docker images in daemon mode
  logs    ) docker-compose logs --tail=50 -f $rest ; exit ;;

  testing ) # testing settings
            testing
            echo 'testing settings' $IMAGE_VERSION $BRANCH;;
  prod    ) # production settings
            production_settings
            echo 'production settings' $IMAGE_VERSION $BRANCH;;
  dev     ) # development settings
            echo "development settings" ;;

  lint    ) lint_javascript ; lint_python ;; # lint all files commited
  test    ) run_tests ;;  # run pytest and jest
  tags    ) ctags -R ./django ./webpack/src/react && echo "collected ctags" ;; # collect ctags for python and js
  precom  ) main__ lint tags test build; exit ;; # run before git commit
  *       ) show_help ; printf >&2 "\n  %sunknown command:  %s%s%s\n" "$red" "$bold" "$*" "$reset" ; exit 1 ;;
  esac;
  shift 1;
done
}

webpack_build() {
  echo 'build webpack for production'
  COMPOSE_FILE='docker-compose.yml:docker-compose.dev.yml:docker-compose.build.yml'
  export COMPOSE_FILE
  rm ./build/*
  docker-compose run --rm webpack
}

collect_static_files() {
  if [[ $1 == '--ignore' ]]; then
    # ignore some apps that probably already are collected
    IGNORE='admin debug_toolbar rest_framework django_extensions core'
    shift
    args="$(printf -- "-i%s " $IGNORE)$@"
  else
    args="$@"
  fi
  docker-compose run --rm web django-admin collectstatic --noinput $args
}

production_settings() {
  BRANCH=$(git status | awk '/On branch/{print $3}')
  export BRANCH=${TRAVIS_BRANCH:-$BRANCH}
  if [[ $BRANCH == 'master' ]]; then
    export IMAGE_VERSION=$(git tag --merged | tail -n1)
  fi
  export COMPOSE_FILE=docker-compose.yml:docker-compose.production.yml
}

testing() {
  production_settings
  if [[ $BRANCH == 'master' ]]; then
    export IMAGE_VERSION=latest
  fi
  export COMPOSE_FILE=docker-compose.yml:docker-compose.testing.yml
}

run_tests() {
  testing
  docker-compose run --rm webpack test || exit 1
  docker-compose run --rm -u django web pytest --create-db || exit 1
}

show_help() {
  printf "\n%s  usage:   %s [...commmands]%s\n\n" "$bold" "run" "$reset"
  cat run \
    | sed -n '/^main__()/,$p;/^}/q'\
    | awk '/\w  *) /{print}/case/{p=1}'\
    | sed 's/; exit//' | sed 's/;;//'\
    | sed "s/).*#\(.*\)$/)$yellow\1$reset/"\
    | sed "s/^ *\(\w* *\))/  $bold\1$reset/"\
    | sort
}

lint_javascript() {
  js_files=$(git diff --staged --name-status | awk '/^[AM].*\.js$/ {print $2}' | sed '/^build/d')
  [[ -n $js_files ]] && prettier --write --semi false --single-quote --trailing-comma es5 $js_files
}
lint_python() {
  py_files=$(git diff --staged --name-status | awk '/^[AM].*\.py$/ {print $2}' | grep -v 'migrations')
  [[ -n $py_files ]] && exists isort && isort --verbose $py_files && exists yapf && yapf --verbose --in-place $py_files
}

load_db() {
  dumpfile=$(ls *.sql -1t 2>/dev/null | head -n1)
  dumpfile=${1:-$dumpfile}
  [[ -e $dumpfile ]] || exit 1
  echo "found database dump: $dumpfile"
  cp $dumpfile django/dbdump.sql

  # loading data
  docker-compose down
  docker-compose run --rm web load_db

  # cleanup
  rm django/dbdump.sql
  echo "done"
}

dump_db() {
  DUMP=$(date +"dbdump_%d-%m-%Y_%H.%M.%S.sql")
  docker-compose up -d postgres
  echo "dumping database to $DUMP"
  docker-compose exec postgres pg_dump --no-owner -U postgres -d postgres > $DUMP
}

exists() {
  command -v "$1" >/dev/null 2>&1
}

enable_service() {
  echo "enable systemd service"
  # must run as root
  ln -s $PWD/universitas.service /lib/systemd/system/
  systemctl enable universitas.service
  systemctl start universitas.service
}

start_jupyter() {
  echo "starting jupyter on http://localhost:8888"
  ( sleep 12; sensible-browser http://localhost:8888 &> /dev/null)&
  docker-compose run --name jupyter --rm -d -p 8888:8888 web jupyter
}

build_django() {
  echo "building"
  docker-compose build
  docker-compose run --rm web django-admin migrate
  docker-compose run --rm web django-admin collectstatic --noinput
}

install_docker() {
  # install docker and docker-compose on ubuntu
  [ $UID = 0 ] || { echo 'must run as root' >&2; exit 1; }
  USERNAME=$1
  apt-get install -y \
    apt-transport-https \
    ca-certificates \
    software-properties-common \
    python3-pip

  pip3 install -U docker-compose

  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
  apt-get update
  apt-get install -y docker-ce

  groupadd -f docker
  if [[ -z $USERNAME ]]; then
    usermod -aG docker $USERNAME
  fi
  systemctl enable docker
}

cd $(dirname $(readlink -f $0))
[[ ! -f django/local.env ]] && echo "# Add environment variables here" > django/local.env
mkdir -p \
  ./webpack/node_modules/\
  ./django/venv/\
  ./volumes/static\
  ./volumes/media/\
  ./volumes/staging/\
  ./volumes/logs/

export COMPOSE_HTTP_TIMEOUT=6000
export GIT_SHA=$(git rev-parse HEAD)
export COMPOSE_FILE=docker-compose.yml:docker-compose.dev.yml
export AWS_ENABLED=$AWS_ENABLED
export IMAGE_VERSION=edge
main__ $@
