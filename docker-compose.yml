version: "2.1"
services:
  webpack:
    image: universitas/webpack:${IMAGE_VERSION:-edge}
    volumes:
      - webpack_build:/var/build/
      - ./webpack:/app/
      - node_modules:/app/node_modules/
    environment:
      - SENTRY_URL=https://e613c71ec39d471da53588b6aefe6bc0@dev.universitas.no/3
      - BUILD_DIR=/var/build/
      - PUBLIC_PATH=/static/

  django:
    image: universitas/django:${IMAGE_VERSION:-edge}
    mem_limit: 1000m # limit memory usage to 1000 Mb
    cpu_quota: 80000 # 80% of 100000 (I think...)
    volumes:
      - ./django:/app
      - webpack_build:/var/build/
      - django_logs:/var/logs/
      - django_media:/var/media/
      - django_staging:/var/staging/
      - django_static:/var/static/
      - ssh:/home/django/.ssh/
    env_file:
      - ./django/base.env
      - ./django/local.env
    environment:
      - GIT_SHA

  web:
    command: uwsgi
    extends: django
    restart: always
    expose:
      - "8000" # wsgi on tcp socket
    volumes:
      # master fifo
      - ${PWD}/fifo/:/run/fifo/
    depends_on:
      - postgres
      - redis
      - rabbit

  celery:
    command: celery
    extends: django
    restart: always
    volumes:
      - ssh:/home/django/.ssh/
    depends_on:
      - postgres
      - redis
      - rabbit
      - celerybeat

  celerybeat:
    command: celerybeat
    extends: django
    restart: always
    depends_on:
      - rabbit

  # RabbitMQ message queue
  # default username:password is guest:guest
  rabbit:
    image: rabbitmq:3
    volumes:
      - rabbitdata:/var/lib/rabbitmq/

  # PostgreSQL database
  postgres:
    image: universitas/postgres:11
    volumes:
      - pgdata:/var/lib/postgresql/data/

  # Redis key value store
  redis:
    image: redis:5
    volumes:
      - redisdata:/data/

volumes:
  rabbitdata: {}
  pgdata: {}
  redisdata: {}
  webpack_build: {}
  node_modules: {}
  ssh:
    driver_opts:
      type: local
      device: ${PWD}/volumes/ssh/
      o: bind
  django_media:
    driver_opts:
      type: local
      device: ${PWD}/volumes/media/
      o: bind
  django_logs:
    driver_opts:
      type: local
      device: ${PWD}/volumes/logs/
      o: bind
  django_static:
    driver_opts:
      type: local
      device: ${PWD}/volumes/static/
      o: bind
  django_staging:
    driver_opts:
      type: local
      device: ${PWD}/volumes/staging/
      o: bind
