{
  "!name": "ramda",
  "!define": {
    "Lens": {}
  },
  "R": {
    "adjust": {
      "!sig": "(a -> a) -> Number -> [a] -> [a]",
      "!type": "fn(fn(?) -> ?, number, [?]) -> [?]",
      "!doc": "Applies a function to the value at the given index of an array, returning a new copy of the array with the element at the given index replaced with the result of the function application."
    },
    "F": {
      "!sig": "* -> Boolean",
      "!type": "fn() -> bool",
      "!doc": "A function that always returns `false`. Any passed in parameters are ignored."
    },
    "T": {
      "!sig": "* -> Boolean",
      "!type": "fn() -> bool",
      "!doc": "A function that always returns `true`. Any passed in parameters are ignored."
    },
    "__": {
      "!sig": "",
      "!type": "",
      "!doc": "A special placeholder value used to specify \"gaps\" within curried functions, allowing partial application of any combination of arguments, regardless of their positions."
    },
    "add": {
      "!sig": "Number -> Number -> Number",
      "!type": "fn(number, number) -> number",
      "!doc": "Adds two values."
    },
    "addIndex": {
      "!sig": "((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)",
      "!type": "fn() -> fn() -> fn() -> !0",
      "!doc": "Creates a new list iteration function from an existing one by adding two new parameters to its callback function: the current index, and the entire list."
    },
    "all": {
      "!sig": "(a -> Boolean) -> [a] -> Boolean",
      "!type": "fn(fn(?) -> bool, [?]) -> bool",
      "!doc": "Returns `true` if all elements of the list match the predicate, `false` if there are any that don't."
    },
    "allPass": {
      "!sig": "[(*... -> Boolean)] -> (*... -> Boolean)",
      "!type": "fn([fn(?) -> bool]) -> fn(?) -> bool",
      "!doc": "Takes a list of predicates and returns a predicate that returns true for a given list of arguments if every one of the provided predicates is satisfied by those arguments."
    },
    "always": {
      "!sig": "a -> (* -> a)",
      "!type": "fn(?) -> fn() -> ?",
      "!doc": "Returns a function that always returns the given value. Note that for non-primitives the value returned is a reference to the original value."
    },
    "and": {
      "!sig": "a -> b -> a | b",
      "!type": "fn(?, ?) -> bool",
      "!doc": "Returns `true` if both arguments are `true`; `false` otherwise."
    },
    "any": {
      "!sig": "(a -> Boolean) -> [a] -> Boolean",
      "!type": "fn(fn(?) -> bool, [?]) -> bool",
      "!doc": "Returns `true` if at least one of elements of the list match the predicate, `false` otherwise."
    },
    "anyPass": {
      "!sig": "[(*... -> Boolean)] -> (*... -> Boolean)",
      "!type": "fn([fn(?) -> bool]) -> fn(?) -> bool",
      "!doc": "Takes a list of predicates and returns a predicate that returns true for a given list of arguments if at least one of the provided predicates is satisfied by those arguments."
    },
    "ap": {
      "!sig": "[a -> b] -> [a] -> [b]",
      "!type": "fn([fn(?) -> ?], [?]) -> [?]",
      "!doc": "ap applies a list of functions to a list of values."
    },
    "aperture": {
      "!sig": "Number -> [a] -> [[a]]",
      "!type": "fn(number, [?]) -> [[?]]",
      "!doc": "Returns a new list, composed of n-tuples of consecutive elements. If `n` is greater than the length of the list, an empty list is returned."
    },
    "append": {
      "!sig": "a -> [a] -> [a]",
      "!type": "fn(?, [?]) -> [?]",
      "!doc": "Returns a new list containing the contents of the given list, followed by the given element."
    },
    "apply": {
      "!sig": "(*... -> a) -> [*] -> a",
      "!type": "fn(fn(?) -> ?, args: [?]) -> ?",
      "!doc": "Applies function `fn` to the argument list `args`. This is useful for creating a fixed-arity function from a variadic function. `fn` should be a bound function if context is significant."
    },
    "applySpec": {
      "!sig": "{k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})",
      "!type": "fn({k: fn(?args: ?) -> ?}, ?args: ?) -> {k: ?}",
      "!doc": "Given a spec object recursively mapping properties to functions, creates a function producing an object of the same structure, by mapping each property to the result of calling its associated function with the supplied arguments."
    },
    "ascend": {
      "!sig": "Ord b => (a -> b) -> a -> a -> Number",
      "!type": "fn(fn(?) -> ?) -> fn(?, ?) -> number",
      "!doc": "Makes an ascending comparator function out of a function that returns a value that can be compared with `<` and `>`."
    },
    "assoc": {
      "!sig": "String -> a -> {k: v} -> {k: v}",
      "!type": "fn(prop: string, value: ?, obj: {}) -> {}",
      "!doc": "Makes a shallow clone of an object, setting or overriding the specified property with the given value. Note that this copies and flattens prototype properties onto the new object as well. All non-primitive properties are copied by reference."
    },
    "assocPath": {
      "!sig": "[Idx] -> a -> {a} -> {a}",
      "!type": "fn(path: [string|number], value: ?, obj: {}) -> {}",
      "!doc": "Makes a shallow clone of an object, setting or overriding the nodes required to create the given path, and placing the specific value at the tail end of that path. Note that this copies and flattens prototype properties onto the new object as well. All non-primitive properties are copied by reference."
    },
    "binary": {
      "!sig": "(* -> c) -> (a, b -> c)",
      "!type": "fn(fn(?) -> ?) -> fn(?, ?) -> ?",
      "!doc": "Wraps a function of any arity (including nullary) in a function that accepts exactly 2 parameters. Any extraneous parameters will not be passed to the supplied function."
    },
    "bind": {
      "!sig": "(* -> *) -> {*} -> (* -> *)",
      "!type": "fn(fn(), {}) -> fn()",
      "!doc": "Creates a function that is bound to a context. Note: `R.bind` does not provide the additional argument-binding capabilities of [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)."
    },
    "both": {
      "!sig": "(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)",
      "!type": "fn(fn() -> bool, fn() -> bool) -> fn() -> bool",
      "!doc": "A function which calls the two provided functions and returns the `&&` of the results. It returns the result of the first function if it is false-y and the result of the second function otherwise. Note that this is short-circuited, meaning that the second function will not be invoked if the first returns a false-y value."
    },
    "call": {
      "!sig": "(*... -> a),*... -> a",
      "!type": "fn(fn(?) -> ?, ?) -> ?",
      "!doc": "Returns the result of calling its first argument with the remaining arguments. This is occasionally useful as a converging function for [`R.converge`](#converge): the first branch can produce a function while the remaining branches produce values to be passed to that function as its arguments."
    },
    "chain": {
      "!sig": "Chain m => (a -> m b) -> m a -> m b",
      "!type": "fn(fn(?) -> ?, ?) -> ?",
      "!doc": "`chain` maps a function over a list and concatenates the results. `chain` is also known as `flatMap` in some libraries"
    },
    "clamp": {
      "!sig": "Ord a => a -> a -> a -> a",
      "!type": "fn(number, number) -> fn(number) -> number",
      "!doc": "Restricts a number to be within a range."
    },
    "clone": {
      "!sig": "{*} -> {*}",
      "!type": "fn({}) -> {}",
      "!doc": "Creates a deep copy of the value which may contain (nested) `Array`s and `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are assigned by reference rather than copied"
    },
    "comparator": {
      "!sig": "(a, b -> Boolean) -> (a, b -> Number)",
      "!type": "fn(fn(?, ?) -> bool) -> fn(?, ?) -> number",
      "!doc": "Makes a comparator function out of a function that reports whether the first element is less than the second."
    },
    "complement": {
      "!sig": "(*... -> *) -> (*... -> Boolean)",
      "!type": "fn(fn(?)) -> fn(?) -> bool",
      "!doc": "Takes a function `f` and returns a function `g` such that if called with the same arguments when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`."
    },
    "compose": {
      "!sig": "((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)",
      "!type": "fn([fn()]) -> fn()",
      "!doc": "Performs right-to-left function composition. The rightmost function may have any arity; the remaining functions must be unary."
    },
    "composeK": {
      "!sig": "Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)",
      "!type": "fn([fn()]) -> fn()",
      "!doc": "Returns the right-to-left Kleisli composition of the provided functions, each of which must return a value of a type supported by [`chain`](#chain)."
    },
    "composeP": {
      "!sig": "((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)",
      "!type": "fn([fn()]) -> fn()",
      "!doc": "Performs right-to-left composition of one or more Promise-returning functions. The rightmost function may have any arity; the remaining functions must be unary."
    },
    "concat": {
      "!sig": "[a] -> [a] -> [a]",
      "!type": "fn([?]|string, [?]|string) -> [?]|string",
      "!doc": "Returns the result of concatenating the given lists or strings."
    },
    "cond": {
      "!sig": "[[(*... -> Boolean),(*... -> *)]] -> (*... -> *)",
      "!type": "fn([fn(?) -> bool]) -> fn(?) -> bool",
      "!doc": "Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic. `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments to `fn` are applied to each of the predicates in turn until one returns a \"truthy\" value, at which point `fn` returns the result of applying its arguments to the corresponding transformer. If none of the predicates matches, `fn` returns undefined."
    },
    "construct": {
      "!sig": "(* -> {*}) -> (* -> {*})",
      "!type": "fn(fn() -> {}) -> fn() -> {}",
      "!doc": "Wraps a constructor function inside a curried function that can be called with the same arguments and returns the same type."
    },
    "constructN": {
      "!sig": "Number -> (* -> {*}) -> (* -> {*})",
      "!type": "fn(number, fn() -> {}) -> fn() -> {}",
      "!doc": "Wraps a constructor function inside a curried function that can be called with the same arguments and returns the same type. The arity of the function returned is specified to allow using variadic constructor functions."
    },
    "contains": {
      "!sig": "a -> [a] -> Boolean",
      "!type": "fn(?, [?]) -> bool",
      "!doc": "Returns `true` if the specified value is equal, in [`R.equals`](#equals) terms, to at least one element of the given list; `false` otherwise."
    },
    "converge": {
      "!sig": "(x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)",
      "!type": "fn() -> fn() -> fn()",
      "!doc": "Accepts a converging function and a list of branching functions and returns a new function. When invoked, this new function is applied to some arguments, each branching function is applied to those same arguments. The results of each branching function are passed as arguments to the converging function to produce the return value."
    },
    "countBy": {
      "!sig": "(a -> String) -> [a] -> {*}",
      "!type": "fn(fn(?) -> string, [?]) -> {string: number}",
      "!doc": "Counts the elements of a list according to how many match each value of a key generated by the supplied function. Returns an object mapping the keys produced by `fn` to the number of occurrences in the list. Note that all keys are coerced to strings because of how JavaScript objects work."
    },
    "curry": {
      "!sig": "(* -> a) -> (* -> a)",
      "!type": "fn(fn()) -> fn()",
      "!doc": "Returns a curried equivalent of the provided function. The curried function has two unusual capabilities. First, its arguments needn't be provided one at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the following are equivalent:"
    },
    "curryN": {
      "!sig": "Number -> (* -> a) -> (* -> a)",
      "!type": "fn(number, fn()) -> fn()",
      "!doc": "Returns a curried equivalent of the provided function, with the specified arity. The curried function has two unusual capabilities. First, its arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the following are equivalent:"
    },
    "dec": {
      "!sig": "Number -> Number",
      "!type": "fn(number) -> number",
      "!doc": "Decrements its argument."
    },
    "defaultTo": {
      "!sig": "a -> b -> a | b",
      "!type": "fn(?) -> fn(?) -> ?|?",
      "!doc": "Returns the second argument if it is not `null`, `undefined` or `NaN`; otherwise the first argument is returned."
    },
    "descend": {
      "!sig": "Ord b => (a -> b) -> a -> a -> Number",
      "!type": "fn(fn(?) -> ?) -> fn(?, ?) -> number",
      "!doc": "Makes a descending comparator function out of a function that returns a value that can be compared with `<` and `>`."
    },
    "difference": {
      "!sig": "[*] -> [*] -> [*]",
      "!type": "fn([?], [?]) -> [?]",
      "!doc": "Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list. Objects and Arrays are compared in terms of value equality, not reference equality."
    },
    "differenceWith": {
      "!sig": "((a, a) -> Boolean) -> [a] -> [a] -> [a]",
      "!type": "fn(fn(?, ?) -> bool, [?], [?]) -> [?]",
      "!doc": "Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list. Duplication is determined according to the value returned by applying the supplied predicate to two list elements."
    },
    "dissoc": {
      "!sig": "String -> {k: v} -> {k: v}",
      "!type": "fn(prop: string, obj: {}) -> {}",
      "!doc": "Returns a new object that does not contain a `prop` property."
    },
    "dissocPath": {
      "!sig": "[Idx] -> {k: v} -> {k: v}",
      "!type": "fn(path: [string|number], value: ?, obj: {}) -> {}",
      "!doc": "Makes a shallow clone of an object, omitting the property at the given path. Note that this copies and flattens prototype properties onto the new object as well. All non-primitive properties are copied by reference."
    },
    "divide": {
      "!sig": "Number -> Number -> Number",
      "!type": "fn(number, number) -> number",
      "!doc": "Divides two numbers. Equivalent to `a / b`."
    },
    "drop": {
      "!sig": "Number -> [a] -> [a]",
      "!type": "fn(number, [?]) -> [?]",
      "!doc": "Returns all but the first `n` elements of the given list, string, or transducer/transformer (or object with a `drop` method)."
    },
    "dropLast": {
      "!sig": "Number -> [a] -> [a]",
      "!type": "fn(number, [?]) -> [?]",
      "!doc": "Returns a list containing all but the last `n` elements of the given `list`."
    },
    "dropLastWhile": {
      "!sig": "(a -> Boolean) -> [a] -> [a]",
      "!type": "fn(fn(?) -> bool, [?]) -> [?]",
      "!doc": "Returns a new list excluding all the tailing elements of a given list which satisfy the supplied predicate function. It passes each value from the right to the supplied predicate function, skipping elements until the predicate function returns a `falsy` value. The predicate function is applied to one argument: *(value)*."
    },
    "dropRepeats": {
      "!sig": "[a] -> [a]",
      "!type": "fn([?]) -> [?]",
      "!doc": "Returns a new list without any consecutively repeating elements. [`R.equals`](#equals) is used to determine equality."
    },
    "dropRepeatsWith": {
      "!sig": "(a, a -> Boolean) -> [a] -> [a]",
      "!type": "fn(?, fn(?) -> bool, [?]) -> [?]",
      "!doc": "Returns a new list without any consecutively repeating elements. Equality is determined by applying the supplied predicate to each pair of consecutive elements. The first element in a series of equal elements will be preserved."
    },
    "dropWhile": {
      "!sig": "(a -> Boolean) -> [a] -> [a]",
      "!type": "fn(fn(?) -> bool, [?]) -> [?]",
      "!doc": "Returns a new list excluding the leading elements of a given list which satisfy the supplied predicate function. It passes each value to the supplied predicate function, skipping elements while the predicate function returns `true`. The predicate function is applied to one argument: *(value)*."
    },
    "either": {
      "!sig": "(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)",
      "!type": "fn(fn() -> bool, fn() -> bool) -> fn() -> bool",
      "!doc": "A function wrapping calls to the two functions in an `||` operation, returning the result of the first function if it is truth-y and the result of the second function otherwise. Note that this is short-circuited, meaning that the second function will not be invoked if the first returns a truth-y value."
    },
    "empty": {
      "!sig": "a -> a",
      "!type": "fn(?) -> ?",
      "!doc": "Returns the empty value of its argument's type. Ramda defines the empty value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other types are supported if they define `<Type>.empty` and/or `<Type>.prototype.empty`."
    },
    "endsWith": {
      "!sig": "[a] -> Boolean",
      "!type": "fn([?], [?]) -> bool",
      "!doc": "Checks if a list ends with the provided values"
    },
    "eqBy": {
      "!sig": "(a -> b) -> a -> a -> Boolean",
      "!type": "fn(fn(?) -> ?, ?, ?) -> bool",
      "!doc": "Takes a function and two values in its domain and returns `true` if the values map to the same value in the codomain; `false` otherwise."
    },
    "eqProps": {
      "!sig": "k -> {k: v} -> {k: v} -> Boolean",
      "!type": "fn(prop: k, {k: v}, {k: v}) -> bool",
      "!doc": "Reports whether two objects have the same value, in [`R.equals`](#equals) terms, for the specified property. Useful as a curried predicate."
    },
    "equals": {
      "!sig": "a -> b -> Boolean",
      "!type": "fn(?, ?) -> bool",
      "!doc": "Returns `true` if its arguments are equivalent, `false` otherwise. Handles cyclical data structures."
    },
    "evolve": {
      "!sig": "{k: (v -> v)} -> {k: v} -> {k: v}",
      "!type": "fn({k: fn(?) -> ?}, {k: ?}) -> {k: ?}",
      "!doc": "Creates a new object by recursively evolving a shallow copy of `object`, according to the `transformation` functions. All non-primitive properties are copied by reference."
    },
    "filter": {
      "!sig": "Filterable f => (a -> Boolean) -> f a -> f a",
      "!type": "fn(fn(?) -> bool, [?]) -> [?]",
      "!doc": "Takes a predicate and a `Filterable`, and returns a new filterable of the same type containing the members of the given filterable which satisfy the given predicate. Filterable objects include plain objects or any object that has a filter method such as `Array`."
    },
    "find": {
      "!sig": "(a -> Boolean) -> [a] -> a | undefined",
      "!type": "fn(fn(?) -> bool, [?]) -> ?1",
      "!doc": "Returns the first element of the list which matches the predicate, or `undefined` if no element matches."
    },
    "findIndex": {
      "!sig": "(a -> Boolean) -> [a] -> Number",
      "!type": "fn(fn(?) -> bool, [?]) -> number",
      "!doc": "Returns the index of the first element of the list which matches the predicate, or `-1` if no element matches."
    },
    "findLast": {
      "!sig": "(a -> Boolean) -> [a] -> a | undefined",
      "!type": "fn(fn(?) -> bool, [?]) -> !1",
      "!doc": "Returns the last element of the list which matches the predicate, or `undefined` if no element matches."
    },
    "findLastIndex": {
      "!sig": "(a -> Boolean) -> [a] -> Number",
      "!type": "fn(fn(?) -> bool, [?]) -> number",
      "!type": "fn() -> fn() -> !0",
      "!doc": "Returns the index of the last element of the list which matches the predicate, or `-1` if no element matches."
    },
    "flatten": {
      "!sig": "[a] -> [b]",
      "!type": "fn([?]) -> [?]",
      "!doc": "Returns a new list by pulling every item out of it (and all its sub-arrays) and putting them in a new array, depth-first."
    },
    "flip": {
      "!sig": "(a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)",
      "!type": "fn() -> fn()",
      "!doc": "Returns a new function much like the supplied one, except that the first two arguments' order is reversed."
    },
    "forEach": {
      "!sig": "(a -> *) -> [a] -> [a]",
      "!type": "fn(fn(?), [?]) -> [?]",
      "!doc": "Iterate over an input `list`, calling a provided function `fn` for each element in the list."
    },
    "forEachObjIndexed": {
      "!sig": "((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a",
      "!type": "fn(fn(value: ?, key: string, obj: {}) -> ?, {}) -> {}",
      "!doc": "Iterate over an input `object`, calling a provided function `fn` for each key and value in the object."
    },
    "fromPairs": {
      "!sig": "[[k,v]] -> {k: v}",
      "!type": "fn([[k, v]]) -> {k: v}",
      "!doc": "Creates a new object from a list key-value pairs. If a key appears in multiple pairs, the rightmost pair is included in the object."
    },
    "groupBy": {
      "!sig": "(a -> String) -> [a] -> {String: [a]}",
      "!type": "fn(fn(?) -> string, [?]) -> {string: [?]}",
      "!doc": "Splits a list into sub-lists stored in an object, based on the result of calling a String-returning function on each element, and grouping the results according to values returned."
    },
    "groupWith": {
      "!sig": "((a, a) -> Boolean) -> [a] -> [[a]]",
      "!type": "fn(fn(?, ?) -> bool, [?]) -> [[?]]",
      "!doc": "Takes a list and returns a list of lists where each sublist's elements are all satisfied pairwise comparison according to the provided function. Only adjacent elements are passed to the comparison function."
    },
    "gt": {
      "!sig": "Ord a => a -> a -> Boolean",
      "!type": "fn(?, ?) -> bool",
      "!doc": "Returns `true` if the first argument is greater than the second; `false` otherwise."
    },
    "gte": {
      "!sig": "Ord a => a -> a -> Boolean",
      "!type": "fn(?, ?) -> bool",
      "!doc": "Returns `true` if the first argument is greater than or equal to the second; `false` otherwise."
    },
    "has": {
      "!sig": "s -> {s: x} -> Boolean",
      "!type": "fn(prop: ?, {}) -> bool",
      "!doc": "Returns whether or not an object has an own property with the specified name"
    },
    "hasIn": {
      "!sig": "s -> {s: x} -> Boolean",
      "!type": "fn(prop: ?, {}) -> bool",
      "!doc": "Returns whether or not an object or its prototype chain has a property with the specified name"
    },
    "head": {
      "!sig": "[a] -> a | Undefined",
      "!type": "fn([?]) -> ?0",
      "!doc": "Returns the first element of the given list or string. In some libraries this function is named `first`."
    },
    "identical": {
      "!sig": "a -> a -> Boolean",
      "!type": "fn(?, ?) -> bool",
      "!doc": "Returns true if its arguments are identical, false otherwise. Values are identical if they reference the same memory. `NaN` is identical to `NaN`; `0` and `-0` are not identical."
    },
    "identity": {
      "!sig": "a -> a",
      "!type": "fn(?) -> !0",
      "!doc": "A function that does nothing but return the parameter supplied to it. Good as a default or placeholder function."
    },
    "ifElse": {
      "!sig": "(*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)",
      "!type": "fn(condition: fn(?) -> bool, onTrue: fn(?), onFalse: fn(?)) -> fn(?)",
      "!doc": "Creates a function that will process either the `onTrue` or the `onFalse` function depending upon the result of the `condition` predicate."
    },
    "inc": {
      "!sig": "Number -> Number",
      "!type": "fn(number) -> number",
      "!doc": "Increments its argument."
    },
    "indexBy": {
      "!sig": "(a -> String) -> [{k: v}] -> {k: {k: v}}",
      "!type": "fn(fn(?) -> string, [{k: v}]) -> {k: {k: v}}",
      "!doc": "Given a function that generates a key, turns a list of objects into an object indexing the objects by the given key. Note that if multiple objects generate the same value for the indexing key only the last value will be included in the generated object."
    },
    "indexOf": {
      "!sig": "a -> [a] -> Number",
      "!type": "fn(?, [?]) -> number",
      "!doc": "Returns the position of the first occurrence of an item in an array, or -1 if the item is not included in the array. [`R.equals`](#equals) is used to determine equality."
    },
    "init": {
      "!sig": "[a] -> [a]",
      "!type": "fn([?]) -> [?]",
      "!doc": "Returns all but the last element of the given list or string."
    },
    "innerJoin": {
      "!sig": "(a -> b -> Boolean) -> [a] -> [b] -> [a]",
      "!type": "fn(pred: fn(?, ?) -> bool, xs: [?], ys: [?]) -> [?]",
      "!doc": "Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list `xs'` comprising each of the elements of `xs` which is equal to one or more elements of `ys` according to `pred`."
    },
    "insert": {
      "!sig": "Number -> a -> [a] -> [a]",
      "!type": "fn(index: number, element: ?, list: [?]) -> [?]",
      "!doc": "Inserts the supplied element into the list, at the specified `index`. _Note that this is not destructive_: it returns a copy of the list with the changes. <small>No lists have been harmed in the application of this function.</small>"
    },
    "insertAll": {
      "!sig": "Number -> [a] -> [a] -> [a]",
      "!type": "fn(index: number, elements: [?], list: [?]) -> [?]",
      "!doc": "Inserts the sub-list into the list, at the specified `index`. _Note that this is not destructive_: it returns a copy of the list with the changes. <small>No lists have been harmed in the application of this function.</small>"
    },
    "intersection": {
      "!sig": "[*] -> [*] -> [*]",
      "!type": "fn([?], [?]) -> [?]",
      "!doc": "Combines two lists into a set (i.e. no duplicates) composed of those elements common to both lists."
    },
    "intersectionWith": {
      "!sig": "((a, a) -> Boolean) -> [a] -> [a] -> [a]",
      "!type": "fn(fn(?, ?) -> bool, [?], [?]) -> [?]",
      "!doc": "Combines two lists into a set (i.e. no duplicates) composed of those elements common to both lists. Duplication is determined according to the value returned by applying the supplied predicate to two list elements."
    },
    "intersperse": {
      "!sig": "a -> [a] -> [a]",
      "!type": "fn(?, [?]) -> [?]",
      "!doc": "Creates a new list with the separator interposed between elements."
    },
    "into": {
      "!sig": "a -> (b -> b) -> [c] -> a",
      "!type": "fn(?, fn(?) -> !0, [?]) -> !0",
      "!doc": "Transforms the items of the list with the transducer and appends the transformed items to the accumulator using an appropriate iterator function based on the accumulator type."
    },
    "invert": {
      "!sig": "{s: x} -> {x: [ s, ... ]}",
      "!type": "fn({k: v}) -> {v: [k]}",
      "!doc": "Same as [`R.invertObj`](#invertObj), however this accounts for objects with duplicate values by putting the values into an array."
    },
    "invertObj": {
      "!sig": "{s: x} -> {x: s}",
      "!type": "fn({k: v}) -> {v: k}",
      "!doc": "Returns a new object with the keys of the given object as values, and the values of the given object, which are coerced to strings, as keys. Note that the last key found is preferred when handling the same value."
    },
    "invoker": {
      "!sig": "Number -> String -> (a -> b -> ... -> n -> Object -> *)",
      "!type": "fn(number, string) -> fn(?, {}) -> ?",
      "!doc": "Turns a named method with a specified arity into a function that can be called directly supplied with arguments and a target object."
    },
    "is": {
      "!sig": "(* -> {*}) -> a -> Boolean",
      "!type": "fn(constructor: ?, val: ?) -> bool",
      "!doc": "See if an object (`val`) is an instance of the supplied constructor. This function will check up the inheritance chain, if any."
    },
    "isEmpty": {
      "!sig": "a -> Boolean",
      "!type": "fn(?) -> bool",
      "!doc": "Returns `true` if the given value is its type's empty value; `false` otherwise."
    },
    "isNil": {
      "!sig": "* -> Boolean",
      "!type": "fn(?) -> bool",
      "!doc": "Checks if the input value is `null` or `undefined`."
    },
    "join": {
      "!sig": "String -> [a] -> String",
      "!type": "fn(seperator: string, list: [?]) -> string",
      "!doc": "Returns a string made by inserting the `separator` between each element and concatenating all the elements into a single string."
    },
    "juxt": {
      "!sig": "[(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])",
      "!type": "fn([fn(?, ?, ?) -> ?]) -> fn(?, ?, ?) -> [?]",
      "!doc": "juxt applies a list of functions to a list of values."
    },
    "keys": {
      "!sig": "{k: v} -> [k]",
      "!type": "fn({k: v}) -> [k]",
      "!doc": "Returns a list containing the names of all the enumerable own properties of the supplied object. Note that the order of the output array is not guaranteed to be consistent across different JS platforms."
    },
    "keysIn": {
      "!sig": "{k: v} -> [k]",
      "!type": "fn({k: v}) -> [k]",
      "!doc": "Returns a list containing the names of all the properties of the supplied object, including prototype properties. Note that the order of the output array is not guaranteed to be consistent across different JS platforms."
    },
    "last": {
      "!sig": "[a] -> a | Undefined",
      "!type": "fn([?]) -> ?0",
      "!doc": "Returns the last element of the given list or string."
    },
    "lastIndexOf": {
      "!sig": "a -> [a] -> Number",
      "!type": "fn(?, [?]) -> number",
      "!doc": "Returns the position of the last occurrence of an item in an array, or -1 if the item is not included in the array. [`R.equals`](#equals) is used to determine equality."
    },
    "length": {
      "!sig": "[a] -> Number",
      "!type": "fn([?]) -> number",
      "!doc": "Returns the number of elements in the array by returning `list.length`."
    },
    "lens": {
      "!sig": "(s -> a) -> ((a, s) -> s) -> Lens s a",
      "!type": "fn(getter: fn(?) -> ?, setter: fn(?, ?) -> ?) -> Lens",
      "!doc": "Returns a lens for the given getter and setter functions. The getter \"gets\" the value of the focus; the setter \"sets\" the value of the focus. The setter should not mutate the data structure."
    },
    "lensIndex": {
      "!sig": "Number -> Lens s a",
      "!type": "fn(number) -> Lens",
      "!doc": "Returns a lens whose focus is the specified index."
    },
    "lensPath": {
      "!sig": "[Idx] -> Lens s a",
      "!type": "fn(path: [string|number]) -> Lens",
      "!doc": "Returns a lens whose focus is the specified path."
    },
    "lensProp": {
      "!sig": "String -> Lens s a",
      "!type": "fn(string) -> Lens",
      "!doc": "Returns a lens whose focus is the specified property."
    },
    "lift": {
      "!sig": "(*... -> *) -> ([*]... -> [*])",
      "!type": "fn(fn(?) -> ?) -> fn([?]) -> [?]",
      "!doc": "\"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply)."
    },
    "liftN": {
      "!sig": "Number -> (*... -> *) -> ([*]... -> [*])",
      "!type": "fn(number, fn(?) -> ?) -> fn([?]) -> [?]",
      "!doc": "\"lifts\" a function to be the specified arity, so that it may \"map over\" that many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply)."
    },
    "lt": {
      "!sig": "Ord a => a -> a -> Boolean",
      "!type": "fn(?, ?) -> bool",
      "!doc": "Returns `true` if the first argument is less than the second; `false` otherwise."
    },
    "lte": {
      "!sig": "Ord a => a -> a -> Boolean",
      "!type": "fn(?, ?) -> bool",
      "!doc": "Returns `true` if the first argument is less than or equal to the second; `false` otherwise."
    },
    "map": {
      "!sig": "Functor f => (a -> b) -> f a -> f b",
      "!type": "fn(fn(?) -> ?, [!0]) -> [!1]",
      "!doc": "Takes a function and a [functor](https://github.com/fantasyland/fantasy-land#functor), applies the function to each of the functor's values, and returns a functor of the same shape."
    },
    "mapAccum": {
      "!sig": "(acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])",
      "!type": "fn(?, ?, [?]) -> ? -> [?] -> [?, [?]]",
      "!doc": "The `mapAccum` function behaves like a combination of map and reduce; it applies a function to each element of a list, passing an accumulating parameter from left to right, and returning a final value of this accumulator together with the new list."
    },
    "mapAccumRight": {
      "!sig": "(x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)",
      "!type": "fn(?, ?, [?]) -> ? -> [?] -> [[?], ?]",
      "!doc": "The `mapAccumRight` function behaves like a combination of map and reduce; it applies a function to each element of a list, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new list."
    },
    "mapObjIndexed": {
      "!sig": "((*, String, Object) -> *) -> Object !-> Object",
      "!type": "fn(fn(?, string, {}) -> ?, {}) -> {}",
      "!doc": "An Object-specific version of [`map`](#map). The function is applied to three arguments: *(value, key, obj)*. If only the value is significant, use [`map`](#map) instead."
    },
    "match": {
      "!sig": "RegExp -> String -> [String | Undefined]",
      "!type": "fn(+RegExp, string) -> [string]",
      "!doc": "Tests a regular expression against a String. Note that this function will return an empty array when there are no matches. This differs from [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) which returns `null` when there are no matches."
    },
    "mathMod": {
      "!sig": "Number -> Number -> Number",
      "!type": "fn(number, number) -> number",
      "!doc": "`mathMod` behaves like the modulo operator should mathematically, unlike the `%` operator (and by extension, [`R.modulo`](#modulo)). So while `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer arguments, and returns NaN when the modulus is zero or negative."
    },
    "max": {
      "!sig": "Ord a => a -> a -> a",
      "!type": "fn(?, !0) -> !0",
      "!doc": "Returns the larger of its two arguments."
    },
    "maxBy": {
      "!sig": "Ord b => (a -> b) -> a -> a -> a",
      "!type": "fn(fn(?) -> ?, !0, !0) -> !0 ",
      "!doc": "Takes a function and two values, and returns whichever value produces the larger result when passed to the provided function."
    },
    "mean": {
      "!sig": "[Number] -> Number",
      "!type": "fn([number]) -> number",
      "!doc": "Returns the mean of the given list of numbers."
    },
    "median": {
      "!sig": "[Number] -> Number",
      "!type": "fn([number]) -> number",
      "!doc": "Returns the median of the given list of numbers."
    },
    "memoize": {
      "!sig": "(*... -> a) -> (*... -> a)",
      "!type": "fn(fn(?) -> ?) -> fn(?) -> ?",
      "!doc": "Creates a new function that, when invoked, caches the result of calling `fn` for a given argument set and returns the result. Subsequent calls to the memoized `fn` with the same argument set will not result in an additional call to `fn`; instead, the cached result for that set of arguments will be returned."
    },
    "memoizeWith": {
      "!sig": "(*... -> String) -> (*... -> a) -> (*... -> a)",
      "!type": "fn(fn(?) -> string, fn(?)) -> fn(?)",
      "!doc": "A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an additional function that will be applied to a given argument set and used to create the cache key under which the results of the function to be memoized will be stored. Care must be taken when implementing key generation to avoid clashes that may overwrite previous entries erroneously."
    },
    "merge": {
      "!sig": "{k: v} -> {k: v} -> {k: v}",
      "!type": "fn({}, {}) -> {}",
      "!doc": "Create a new object with the own properties of the first object merged with the own properties of the second object. If a key exists in both objects, the value from the second object will be used."
    },
    "mergeAll": {
      "!sig": "[{k: v}] -> {k: v}",
      "!type": "fn([{}]) -> {}",
      "!doc": "Merges a list of objects together into one object."
    },
    "mergeDeepLeft": {
      "!sig": "{a} -> {a} -> {a}",
      "!type": "fn({}, {}) -> {}",
      "!doc": "Creates a new object with the own properties of the first object merged with the own properties of the second object. If a key exists in both objects: - and both values are objects, the two values will be recursively merged - otherwise the value from the first object will be used."
    },
    "mergeDeepRight": {
      "!sig": "{a} -> {a} -> {a}",
      "!type": "fn({}, {}) -> {}",
      "!doc": "Creates a new object with the own properties of the first object merged with the own properties of the second object. If a key exists in both objects: - and both values are objects, the two values will be recursively merged - otherwise the value from the second object will be used."
    },
    "mergeDeepWith": {
      "!sig": "(a -> a -> a) -> {a} -> {a} -> {a}",
      "!type": "fn(fn(?, !0) -> !0, {}, {}) -> {}",
      "!doc": "Creates a new object with the own properties of the two provided objects. If a key exists in both objects: - and both associated values are also objects then the values will be   recursively merged. - otherwise the provided function is applied to associated values using the   resulting value as the new value associated with the key. If a key only exists in one object, the value will be associated with the key of the resulting object."
    },
    "mergeDeepWithKey": {
      "!sig": "(String -> a -> a -> a) -> {a} -> {a} -> {a}",
      "!type": "fn(fn(string, ?, ?) -> ?, {}, {}) -> {}",
      "!doc": "Creates a new object with the own properties of the two provided objects. If a key exists in both objects: - and both associated values are also objects then the values will be   recursively merged. - otherwise the provided function is applied to the key and associated values   using the resulting value as the new value associated with the key. If a key only exists in one object, the value will be associated with the key of the resulting object."
    },
    "mergeWith": {
      "!sig": "(a -> a -> a) -> {a} -> {a} -> {a}",
      "!type": "fn(fn(?, ?) -> ?, {}, {}) -> {}",
      "!doc": "Creates a new object with the own properties of the two provided objects. If a key exists in both objects, the provided function is applied to the values associated with the key in each object, with the result being used as the value associated with the key in the returned object."
    },
    "mergeWithKey": {
      "!sig": "(String -> a -> a -> a) -> {a} -> {a} -> {a}",
      "!type": "fn(fn(string, ?, ?) -> ?, {}, {}) -> {}",
      "!doc": "Creates a new object with the own properties of the two provided objects. If a key exists in both objects, the provided function is applied to the key and the values associated with the key in each object, with the result being used as the value associated with the key in the returned object."
    },
    "min": {
      "!sig": "Ord a => a -> a -> a",
      "!type": "fn(?, ?) -> ?",
      "!doc": "Returns the smaller of its two arguments."
    },
    "minBy": {
      "!sig": "Ord b => (a -> b) -> a -> a -> a",
      "!type": "fn(fn(?) -> ?, ?, ?) -> ?",
      "!doc": "Takes a function and two values, and returns whichever value produces the smaller result when passed to the provided function."
    },
    "modulo": {
      "!sig": "Number -> Number -> Number",
      "!type": "fn(number, number) -> number",
      "!doc": "Divides the first parameter by the second and returns the remainder. Note that this function preserves the JavaScript-style behavior for modulo. For mathematical modulo see [`mathMod`](#mathMod)."
    },
    "multiply": {
      "!sig": "Number -> Number -> Number",
      "!type": "fn(number, number) -> number",
      "!doc": "Multiplies two numbers. Equivalent to `a * b` but curried."
    },
    "nAry": {
      "!sig": "Number -> (* -> a) -> (* -> a)",
      "!type": "fn(arity: number, func: fn()) -> fn()",
      "!doc": "Wraps a function of any arity (including nullary) in a function that accepts exactly `n` parameters. Any extraneous parameters will not be passed to the supplied function."
    },
    "negate": {
      "!sig": "Number -> Number",
      "!type": "fn(number) -> number",
      "!doc": "Negates its argument."
    },
    "none": {
      "!sig": "(a -> Boolean) -> [a] -> Boolean",
      "!type": "fn(fn(?) -> bool, [?]) -> bool",
      "!doc": "Returns `true` if no elements of the list match the predicate, `false` otherwise."
    },
    "not": {
      "!sig": "* -> Boolean",
      "!type": "fn(?) -> bool",
      "!doc": "A function that returns the `!` of its argument. It will return `true` when passed false-y value, and `false` when passed a truth-y one."
    },
    "nth": {
      "!sig": "Number -> [a] -> a | Undefined",
      "!type": "fn(number, [?]) -> ?",
      "!doc": "Returns the nth element of the given list or string. If n is negative the element at index length + n is returned."
    },
    "nthArg": {
      "!sig": "Number -> *... -> *",
      "!type": "fn(number, ?) -> ?",
      "!doc": "Returns a function which returns its nth argument."
    },
    "o": {
      "!sig": "(b -> c) -> (a -> b) -> a -> c",
      "!type": "fn(fn(), fn(), ?) -> ?",
      "!doc": "`o` is a curried composition function that returns a unary function. Like [`compose`](#compose), `o` performs right-to-left function composition. Unlike [`compose`](#compose), the rightmost function passed to `o` will be invoked with only one argument."
    },
    "objOf": {
      "!sig": "String -> a -> {String:a}",
      "!type": "fn(key: string, value: ?) -> {string: ?}",
      "!doc": "Creates an object containing a single key:value pair."
    },
    "of": {
      "!sig": "a -> [a]",
      "!type": "fn(value: ?) -> [?]",
      "!doc": "Returns a singleton array containing the value provided."
    },
    "omit": {
      "!sig": "[String] -> {String: *} -> {String: *}",
      "!type": "fn(keys: [string], obj: {}) -> {}",
      "!doc": "Returns a partial copy of an object omitting the keys specified."
    },
    "once": {
      "!sig": "(a... -> b) -> (a... -> b)",
      "!type": "fn(fn: fn()) -> fn()",
      "!doc": "Accepts a function `fn` and returns a function that guards invocation of `fn` such that `fn` can only ever be called once, no matter how many times the returned function is invoked. The first value calculated is returned in subsequent invocations."
    },
    "or": {
      "!sig": "a -> b -> a | b",
      "!type": "fn(?, ?) -> bool",
      "!doc": "Returns `true` if one or both of its arguments are `true`. Returns `false` if both arguments are `false`."
    },
    "over": {
      "!sig": "Lens s a -> (a -> a) -> s -> s",
      "!type": "fn(Lens, fn(?) -> !0, {}) -> {}",
      "!doc": "Returns the result of \"setting\" the portion of the given data structure focused by the given lens to the result of applying the given function to the focused value."
    },
    "pair": {
      "!sig": "a -> b -> (a,b)",
      "!type": "fn(?, ?) -> [?]",
      "!doc": "Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`."
    },
    "partial": {
      "!sig": "((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)",
      "!type": "fn(f: fn(?), arguments: [?]) -> fn(?)",
      "!doc": "Takes a function `f` and a list of arguments, and returns a function `g`. When applied, `g` returns the result of applying `f` to the arguments provided initially followed by the arguments provided to `g`."
    },
    "partialRight": {
      "!sig": "((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)",
      "!type": "fn(f: fn(?), arguments: [?]) -> fn(?)",
      "!doc": "Takes a function `f` and a list of arguments, and returns a function `g`. When applied, `g` returns the result of applying `f` to the arguments provided to `g` followed by the arguments provided initially."
    },
    "partition": {
      "!sig": "Filterable f => (a -> Boolean) -> f a -> [f a, f a]",
      "!type": "fn(fn(?) -> bool, [?]) -> [[?]]",
      "!doc": "Takes a predicate and a list or other `Filterable` object and returns the pair of filterable objects of the same type of elements which do and do not satisfy, the predicate, respectively. Filterable objects include plain objects or any object that has a filter method such as `Array`."
    },
    "path": {
      "!sig": "[Idx] -> {a} -> a | Undefined",
      "!type": "fn(path: [number|string], {}) -> ?",
      "!doc": "Retrieve the value at a given path."
    },
    "pathEq": {
      "!sig": "[Idx] -> a -> {a} -> Boolean",
      "!type": "fn(path: [string|number], value: ?, obj: {}) -> bool",
      "!doc": "Determines whether a nested path on an object has a specific value, in [`R.equals`](#equals) terms. Most likely used to filter a list."
    },
    "pathOr": {
      "!sig": "a -> [Idx] -> {a} -> a",
      "!type": "fn(default: ?, path: [string|number], obj: {}) -> ?",
      "!doc": "If the given, non-null object has a value at the given path, returns the value at that path. Otherwise returns the provided default value."
    },
    "pathSatisfies": {
      "!sig": "(a -> Boolean) -> [Idx] -> {a} -> Boolean",
      "!type": "fn(predicate: fn(?) -> bool, path: [string|number], obj: {}) -> bool",
      "!doc": "Returns `true` if the specified object property at given path satisfies the given predicate; `false` otherwise."
    },
    "pick": {
      "!sig": "[k] -> {k: v} -> {k: v}",
      "!type": "fn([string], {}) -> {}",
      "!doc": "Returns a partial copy of an object containing only the keys specified. If the key does not exist, the property is ignored."
    },
    "pickAll": {
      "!sig": "[k] -> {k: v} -> {k: v}",
      "!type": "fn([string], {}) -> {}",
      "!doc": "Similar to `pick` except that this one includes a `key: undefined` pair for properties that don't exist."
    },
    "pickBy": {
      "!sig": "(v, k -> Boolean) -> {k: v} -> {k: v}",
      "!type": "fn(fn(?, ?) -> bool, {}) -> {}",
      "!doc": "Returns a partial copy of an object containing only the keys that satisfy the supplied predicate."
    },
    "pipe": {
      "!sig": "(((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)",
      "!type": "fn([fn()]) -> fn()",
      "!doc": "Performs left-to-right function composition. The leftmost function may have any arity; the remaining functions must be unary."
    },
    "pipeK": {
      "!sig": "Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)",
      "!type": "fn([fn()]) -> fn()",
      "!doc": "Returns the left-to-right Kleisli composition of the provided functions, each of which must return a value of a type supported by [`chain`](#chain)."
    },
    "pipeP": {
      "!sig": "((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)",
      "!type": "fn([fn()]) -> fn()",
      "!doc": "Performs left-to-right composition of one or more Promise-returning functions. The leftmost function may have any arity; the remaining functions must be unary."
    },
    "pluck": {
      "!sig": "Functor f => k -> f {k: v} -> f v",
      "!type": "fn(prop: string, list: [{}]) -> [?]",
      "!doc": "Returns a new list by plucking the same named property off all objects in the list supplied."
    },
    "prepend": {
      "!sig": "a -> [a] -> [a]",
      "!type": "fn(?, [?]) -> [?]",
      "!doc": "Returns a new list with the given element at the front, followed by the contents of the list."
    },
    "product": {
      "!sig": "[Number] -> Number",
      "!type": "fn([number]) -> number",
      "!doc": "Multiplies together all the elements of a list."
    },
    "project": {
      "!sig": "[k] -> [{k: v}] -> [{k: v}]",
      "!type": "fn([string|number], [{}]) -> [{}]",
      "!doc": "Reasonable analog to SQL `select` statement."
    },
    "prop": {
      "!sig": "s -> {s: a} -> a | Undefined",
      "!type": "fn(prop: ?, obj: {}) -> ?",
      "!doc": "Returns a function that when supplied an object returns the indicated property of that object, if it exists."
    },
    "propEq": {
      "!sig": "String -> a -> Object -> Boolean",
      "!type": "fn(prop: ?, value: ?, obj: {}) -> bool",
      "!doc": "Returns `true` if the specified object property is equal, in [`R.equals`](#equals) terms, to the given value; `false` otherwise."
    },
    "propIs": {
      "!sig": "Type -> String -> Object -> Boolean",
      "!type": "fn(type: ?, prop: string, obj: {}) -> bool",
      "!doc": "Returns `true` if the specified object property is of the given type; `false` otherwise."
    },
    "propOr": {
      "!sig": "a -> String -> Object -> a",
      "!type": "fn(value: ?, prop: string, obj: {}) -> ?",
      "!doc": "If the given, non-null object has an own property with the specified name, returns the value of that property. Otherwise returns the provided default value."
    },
    "propSatisfies": {
      "!sig": "(a -> Boolean) -> String -> {String: a} -> Boolean",
      "!type": "fn(predicate: fn(?) -> bool, prop: string, obj: {}) -> bool",
      "!doc": "Returns `true` if the specified object property satisfies the given predicate; `false` otherwise."
    },
    "props": {
      "!sig": "[k] -> {k: v} -> [v]",
      "!type": "fn(props: [?], obj: {}) -> [?]",
      "!doc": "Acts as multiple `prop`: array of keys in, array of values out. Preserves order."
    },
    "range": {
      "!sig": "Number -> Number -> [Number]",
      "!type": "fn(from: number, to: number) -> [number]",
      "!doc": "Returns a list of numbers from `from` (inclusive) to `to` (exclusive)."
    },
    "reduce": {
      "!sig": "((a, b) -> a) -> a -> [b] -> a",
      "!type": "fn(fn(?, ?) -> ?, ?, [?]) -> ?",
      "!doc": "Returns a single item by iterating through the list, successively calling the iterator function and passing it an accumulator value and the current value from the array, and then passing the result to the next call."
    },
    "reduceBy": {
      "!sig": "((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}",
      "!type": "fn(fn(?, ?) -> !0, fn(?) -> string, [?]) -> {string: ?}",
      "!doc": "Groups the elements of the list according to the result of calling the String-returning function `keyFn` on each element and reduces the elements of each group to a single value via the reducer function `valueFn`."
    },
    "reduceRight": {
      "!sig": "(a, b -> b) -> b -> [a] -> b",
      "!type": "fn(fn(?) -> ?) -> fn(?, [?]) -> ?",
      "!doc": "Returns a single item by iterating through the list, successively calling the iterator function and passing it an accumulator value and the current value from the array, and then passing the result to the next call."
    },
    "reduceWhile": {
      "!sig": "((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a",
      "!type": "fn(fn(?, ?) -> bool, fn(?, ?) -> ?, ?, [?]) -> ?",
      "!doc": "Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating through the list, successively calling the iterator function. `reduceWhile` also takes a predicate that is evaluated before each step. If the predicate returns `false`, it \"short-circuits\" the iteration and returns the current value of the accumulator."
    },
    "reduced": {
      "!sig": "a -> *",
      "!type": "fn(?) -> ?",
      "!doc": "Returns a value wrapped to indicate that it is the final value of the reduce and transduce functions. The returned value should be considered a black box: the internal structure is not guaranteed to be stable."
    },
    "reject": {
      "!sig": "Filterable f => (a -> Boolean) -> f a -> f a",
      "!type": "fn(fn(?) -> bool, [?]) -> [?]",
      "!doc": "The complement of [`filter`](#filter)."
    },
    "remove": {
      "!sig": "Number -> Number -> [a] -> [a]",
      "!type": "fn(start: number, count: number, list: [?]) -> [?]",
      "!doc": "Removes the sub-list of `list` starting at index `start` and containing `count` elements. _Note that this is not destructive_: it returns a copy of the list with the changes. <small>No lists have been harmed in the application of this function.</small>"
    },
    "repeat": {
      "!sig": "a -> n -> [a]",
      "!type": "fn(value: ?, n: number) -> [!0]",
      "!doc": "Returns a fixed list of size `n` containing a specified identical value."
    },
    "replace": {
      "!sig": "RegExp|String -> String -> String -> String",
      "!type": "fn(+RegExp|string, string, string) -> string",
      "!doc": "Replace a substring or regex match in a string with a replacement."
    },
    "reverse": {
      "!sig": "[a] -> [a]",
      "!type": "fn([?]) -> [?]",
      "!doc": "Returns a new list or string with the elements or characters in reverse order."
    },
    "scan": {
      "!sig": "(a,b -> a) -> a -> [b] -> [a]",
      "!type": "fn(fn(?, ?) -> ?, ?, [?]) -> [?]",
      "!doc": "Scan is similar to [`reduce`](#reduce), but returns a list of successively reduced values from the left"
    },
    "sequence": {
      "!sig": "(Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)",
      "!type": "fn(fn(?) -> ?, ?) -> ?",
      "!doc": "Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable) of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an Applicative of Traversable."
    },
    "set": {
      "!sig": "Lens s a -> a -> s -> s",
      "!type": "fn(Lens, ?, {}) -> {}",
      "!doc": "Returns the result of \"setting\" the portion of the given data structure focused by the given lens to the given value."
    },
    "slice": {
      "!sig": "Number -> Number -> [a] -> [a]",
      "!type": "fn(fromIndex: number, toIndex: number, list: [?]) -> [?]",
      "!doc": "Returns the elements of the given list or string (or object with a `slice` method) from `fromIndex` (inclusive) to `toIndex` (exclusive)."
    },
    "sort": {
      "!sig": "(a,a -> Number) -> [a] -> [a]",
      "!type": "fn(fn(?, ?) -> number, [?]) -> [?]",
      "!doc": "Returns a copy of the list, sorted according to the comparator function, which should accept two values at a time and return a negative number if the first value is smaller, a positive number if it's larger, and zero if they are equal. Please note that this is a **copy** of the list. It does not modify the original."
    },
    "sortBy": {
      "!sig": "Ord b => (a -> b) -> [a] -> [a]",
      "!type": "fn(fn(?) -> ?, [?]) -> [?]",
      "!doc": "Sorts the list according to the supplied function."
    },
    "sortWith": {
      "!sig": "[a -> a -> Number] -> [a] -> [a]",
      "!type": "fn([fn(?, ?) -> number], [?]) -> [?]",
      "!doc": "Sorts a list according to a list of comparators."
    },
    "split": {
      "!sig": "(String | RegExp) -> String -> [String]",
      "!type": "fn(string|+RegExp, string) -> [string]",
      "!doc": "Splits a string into an array of strings based on the given separator."
    },
    "splitAt": {
      "!sig": "Number -> [a] -> [[a], [a]]",
      "!type": "fn(index: number, list: [?]) -> [[?]]",
      "!doc": "Splits a given list or string at a given index."
    },
    "splitEvery": {
      "!sig": "Number -> [a] -> [[a]]",
      "!type": "fn(length: number, list: [?]) -> [[?]]",
      "!doc": "Splits a collection into slices of the specified length."
    },
    "splitWhen": {
      "!sig": "(a -> Boolean) -> [a] -> [[a], [a]]",
      "!type": "fn(fn(?) -> bool, [?]) -> [[?]]",
      "!doc": "Takes a list and a predicate and returns a pair of lists with the following properties:"
    },
    "startsWith": {
      "!sig": "[a] -> Boolean",
      "!type": "fn([?], [?]) -> bool",
      "!doc": "Checks if a list starts with the provided values"
    },
    "subtract": {
      "!sig": "Number -> Number -> Number",
      "!type": "fn(number, number) -> number",
      "!doc": "Subtracts its second argument from its first argument."
    },
    "sum": {
      "!sig": "[Number] -> Number",
      "!type": "fn([number]) -> number",
      "!doc": "Adds together all the elements of a list."
    },
    "symmetricDifference": {
      "!sig": "[*] -> [*] -> [*]",
      "!type": "fn([?], [?]) -> [?]",
      "!doc": "Finds the set (i.e. no duplicates) of all elements contained in the first or second list, but not both."
    },
    "symmetricDifferenceWith": {
      "!sig": "((a, a) -> Boolean) -> [a] -> [a] -> [a]",
      "!type": "fn(fn(?, ?) -> bool, [?], [?]) -> [?]",
      "!doc": "Finds the set (i.e. no duplicates) of all elements contained in the first or second list, but not both. Duplication is determined according to the value returned by applying the supplied predicate to two list elements."
    },
    "tail": {
      "!sig": "[a] -> [a]",
      "!type": "fn([?]) -> [?]",
      "!doc": "Returns all but the first element of the given list or string (or object with a `tail` method)."
    },
    "take": {
      "!sig": "Number -> [a] -> [a]",
      "!type": "fn(number, [?]) -> [?]",
      "!doc": "Returns the first `n` elements of the given list, string, or transducer/transformer (or object with a `take` method)."
    },
    "takeLast": {
      "!sig": "Number -> [a] -> [a]",
      "!type": "fn(number, [?]) -> [?]",
      "!doc": "Returns a new list containing the last `n` elements of the given list. If `n > list.length`, returns a list of `list.length` elements."
    },
    "takeLastWhile": {
      "!sig": "(a -> Boolean) -> [a] -> [a]",
      "!type": "fn(fn(?) -> bool, [?]) -> [?]",
      "!doc": "Returns a new list containing the last `n` elements of a given list, passing each value to the supplied predicate function, and terminating when the predicate function returns `false`. Excludes the element that caused the predicate function to fail. The predicate function is passed one argument: *(value)*."
    },
    "takeWhile": {
      "!sig": "(a -> Boolean) -> [a] -> [a]",
      "!type": "fn(fn(?) -> bool, [?]) -> [?]",
      "!doc": "Returns a new list containing the first `n` elements of a given list, passing each value to the supplied predicate function, and terminating when the predicate function returns `false`. Excludes the element that caused the predicate function to fail. The predicate function is passed one argument: *(value)*."
    },
    "tap": {
      "!sig": "(a -> *) -> a -> a",
      "!type": "fn(fn(?), ?) -> ?",
      "!doc": "Runs the given function with the supplied object, then returns the object."
    },
    "test": {
      "!sig": "RegExp -> String -> Boolean",
      "!type": "fn(+RegExp, string) -> bool",
      "!doc": "Determines whether a given string matches a given regular expression."
    },
    "times": {
      "!sig": "(Number -> a) -> Number -> [a]",
      "!type": "fn(fn(number) -> ?, number) -> [?]",
      "!doc": "Calls an input function `n` times, returning an array containing the results of those function calls."
    },
    "toLower": {
      "!sig": "String -> String",
      "!type": "fn(string) -> string",
      "!doc": "The lower case version of a string."
    },
    "toPairs": {
      "!sig": "{String: *} -> [[String,*]]",
      "!type": "fn({?: ?}) -> [[?]]",
      "!doc": "Converts an object into an array of key, value arrays. Only the object's own properties are used. Note that the order of the output array is not guaranteed to be consistent across different JS platforms."
    },
    "toPairsIn": {
      "!sig": "{String: *} -> [[String,*]]",
      "!type": "fn({?: ?}) -> [[?]]",
      "!doc": "Converts an object into an array of key, value arrays. The object's own properties and prototype properties are used. Note that the order of the output array is not guaranteed to be consistent across different JS platforms."
    },
    "toString": {
      "!sig": "* -> String",
      "!type": "fn(?) -> string",
      "!doc": "Returns the string representation of the given value. `eval`'ing the output should result in a value equivalent to the input value. Many of the built-in `toString` methods do not satisfy this requirement."
    },
    "toUpper": {
      "!sig": "String -> String",
      "!type": "fn(string) -> string",
      "!doc": "The upper case version of a string."
    },
    "transduce": {
      "!sig": "(c -> c) -> ((a, b) -> a) -> a -> [b] -> a",
      "!type": "fn(fn(?) -> ?, fn(?, ?) -> ?, ?, [?]) -> ?",
      "!doc": "Initializes a transducer using supplied iterator function. Returns a single item by iterating through the list, successively calling the transformed iterator function and passing it an accumulator value and the current value from the array, and then passing the result to the next call."
    },
    "transpose": {
      "!sig": "[[a]] -> [[a]]",
      "!type": "fn([[?]]) -> [[?]]",
      "!doc": "Transposes the rows and columns of a 2D list. When passed a list of `n` lists of length `x`, returns a list of `x` lists of length `n`."
    },
    "traverse": {
      "!sig": "(Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)",
      "!type": "fn(fn(?) -> ?, fn(?) -> ?, ?) -> ?",
      "!doc": "Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable), then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative into an Applicative of Traversable."
    },
    "trim": {
      "!sig": "String -> String",
      "!type": "fn(string) -> string",
      "!doc": "Removes (strips) whitespace from both ends of the string."
    },
    "tryCatch": {
      "!sig": "(...x -> a) -> ((e, ...x) -> a) -> (...x -> a)",
      "!type": "fn(tryer: fn(?), catcher: fn(+Error, ?)) -> fn()",
      "!doc": "`tryCatch` takes two functions, a `tryer` and a `catcher`. The returned function evaluates the `tryer`; if it does not throw, it simply returns the result. If the `tryer` *does* throw, the returned function evaluates the `catcher` function and returns its result. Note that for effective composition with this function, both the `tryer` and `catcher` functions must return the same type of results."
    },
    "type": {
      "!sig": "(* -> {*}) -> String",
      "!type": "fn(?) -> string",
      "!doc": "Gives a single-word string description of the (native) type of a value, returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not attempt to distinguish user Object types any further, reporting them all as 'Object'."
    },
    "unapply": {
      "!sig": "([*...] -> a) -> (*... -> a)",
      "!type": "fn(fn([?]) -> ?) -> fn(?) -> ?",
      "!doc": "Takes a function `fn`, which takes a single array argument, and returns a function which:"
    },
    "unary": {
      "!sig": "(* -> b) -> (a -> b)",
      "!type": "fn(?) -> fn(?)",
      "!doc": "Wraps a function of any arity (including nullary) in a function that accepts exactly 1 parameter. Any extraneous parameters will not be passed to the supplied function."
    },
    "uncurryN": {
      "!sig": "Number -> (a -> b) -> (a -> c)",
      "!type": "fn(number, fn()) -> fn()",
      "!doc": "Returns a function of arity `n` from a (manually) curried function."
    },
    "unfold": {
      "!sig": "(a -> [b]) -> * -> [b]",
      "!type": "fn(fn(?) -> [?], ?) -> [?]",
      "!doc": "Builds a list from a seed value. Accepts an iterator function, which returns either false to stop iteration or an array of length 2 containing the value to add to the resulting list and the seed to be used in the next call to the iterator function."
    },
    "union": {
      "!sig": "[*] -> [*] -> [*]",
      "!type": "fn([?], [?]) -> [?]",
      "!doc": "Combines two lists into a set (i.e. no duplicates) composed of the elements of each list."
    },
    "unionWith": {
      "!sig": "(a -> a -> Boolean) -> [*] -> [*] -> [*]",
      "!type": "fn(fn(?, ?) -> bool, [?], [?]) -> [?]",
      "!doc": "Combines two lists into a set (i.e. no duplicates) composed of the elements of each list. Duplication is determined according to the value returned by applying the supplied predicate to two list elements."
    },
    "uniq": {
      "!sig": "[a] -> [a]",
      "!type": "fn([?]) -> [?]",
      "!doc": "Returns a new list containing only one copy of each element in the original list. [`R.equals`](#equals) is used to determine equality."
    },
    "uniqBy": {
      "!sig": "(a -> b) -> [a] -> [a]",
      "!type": "fn(fn(?), [?]) -> [?]",
      "!doc": "Returns a new list containing only one copy of each element in the original list, based upon the value returned by applying the supplied function to each list element. Prefers the first item if the supplied function produces the same value on two items. [`R.equals`](#equals) is used for comparison."
    },
    "uniqWith": {
      "!sig": "(a, a -> Boolean) -> [a] -> [a]",
      "!type": "fn(fn(?, ?) -> bool, [?]) -> [?]",
      "!doc": "Returns a new list containing only one copy of each element in the original list, based upon the value returned by applying the supplied predicate to two list elements. Prefers the first item if two items compare equal based on the predicate."
    },
    "unless": {
      "!sig": "(a -> Boolean) -> (a -> a) -> a -> a",
      "!type": "fn(fn(?) -> bool, fn(?) -> ?, ?) -> ?",
      "!doc": "Tests the final argument by passing it to the given predicate function. If the predicate is not satisfied, the function will return the result of calling the `whenFalseFn` function with the same argument. If the predicate is satisfied, the argument is returned as is."
    },
    "unnest": {
      "!sig": "Chain c => c (c a) -> c a",
      "!type": "fn(?) -> ?",
      "!doc": "Shorthand for `R.chain(R.identity)`, which removes one level of nesting from any [Chain](https://github.com/fantasyland/fantasy-land#chain)."
    },
    "until": {
      "!sig": "(a -> Boolean) -> (a -> a) -> a -> a",
      "!type": "fn(predicate: fn(?) -> bool, transform: fn(?) -> ?, value: ?) -> ?",
      "!doc": "Takes a predicate, a transformation function, and an initial value, and returns a value of the same type as the initial value. It does so by applying the transformation until the predicate is satisfied, at which point it returns the satisfactory value."
    },
    "update": {
      "!sig": "Number -> a -> [a] -> [a]",
      "!type": "fn(index: number, value: ?, list: [?]) -> [?]",
      "!doc": "Returns a new copy of the array with the element at the provided index replaced with the given value."
    },
    "useWith": {
      "!sig": "(x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)",
      "!type": "fn(fn(?), [fn()]) -> fn(?)",
      "!doc": "Accepts a function `fn` and a list of transformer functions and returns a new curried function. When the new function is invoked, it calls the function `fn` with parameters consisting of the result of calling each supplied handler on successive arguments to the new function."
    },
    "values": {
      "!sig": "{k: v} -> [v]",
      "!type": "fn({}) -> [?]",
      "!doc": "Returns a list of all the enumerable own properties of the supplied object. Note that the order of the output array is not guaranteed across different JS platforms."
    },
    "valuesIn": {
      "!sig": "{k: v} -> [v]",
      "!type": "fn({}) -> [?]",
      "!doc": "Returns a list of all the properties, including prototype properties, of the supplied object. Note that the order of the output array is not guaranteed to be consistent across different JS platforms."
    },
    "view": {
      "!sig": "Lens s a -> s -> a",
      "!type": "fn(Lens, {}) -> ?",
      "!doc": "Returns a \"view\" of the given data structure, determined by the given lens. The lens's focus determines which portion of the data structure is visible."
    },
    "when": {
      "!sig": "(a -> Boolean) -> (a -> a) -> a -> a",
      "!type": "fn(predicate: fn(?) -> bool, whenTrue: fn(?) -> ?, arg: ?) -> ?",
      "!doc": "Tests the final argument by passing it to the given predicate function. If the predicate is satisfied, the function will return the result of calling the `whenTrueFn` function with the same argument. If the predicate is not satisfied, the argument is returned as is."
    },
    "where": {
      "!sig": "{String: (* -> Boolean)} -> {String: *} -> Boolean",
      "!type": "fn(spec: {string: fn(?) -> bool}, test: {string: ?}) -> bool",
      "!doc": "Takes a spec object and a test object; returns true if the test satisfies the spec. Each of the spec's own properties must be a predicate function. Each predicate is applied to the value of the corresponding property of the test object. `where` returns true if all the predicates return true, false otherwise."
    },
    "whereEq": {
      "!sig": "{String: *} -> {String: *} -> Boolean",
      "!type": "fn(spec: {string: ?}, test: {string: ?}) -> bool",
      "!doc": "Takes a spec object and a test object; returns true if the test satisfies the spec, false otherwise. An object satisfies the spec if, for each of the spec's own properties, accessing that property of the object gives the same value (in [`R.equals`](#equals) terms) as accessing that property of the spec."
    },
    "without": {
      "!sig": "[a] -> [a] -> [a]",
      "!type": "fn([?], [?]) -> [?]",
      "!doc": "Returns a new list without values in the first argument. [`R.equals`](#equals) is used to determine equality."
    },
    "xprod": {
      "!sig": "[a] -> [b] -> [[a,b]]",
      "!type": "fn([?], [?]) -> [[?]]",
      "!doc": "Creates a new list out of the two supplied by creating each possible pair from the lists."
    },
    "zip": {
      "!sig": "[a] -> [b] -> [[a,b]]",
      "!type": "fn([?], [?]) -> [[?]]",
      "!doc": "Creates a new list out of the two supplied by pairing up equally-positioned items from both lists. The returned list is truncated to the length of the shorter of the two input lists. Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`."
    },
    "zipObj": {
      "!sig": "[String] -> [*] -> {String: *}",
      "!type": "fn(keys: [string], values: [?]) -> {string: ?}",
      "!doc": "Creates a new object out of a list of keys and a list of values. Key/value pairing is truncated to the length of the shorter of the two lists. Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`."
    },
    "zipWith": {
      "!sig": "(a,b -> c) -> [a] -> [b] -> [c]",
      "!type": "fn(fn(?, ?) -> ?, [?], [?]) -> [?]",
      "!doc": "Creates a new list out of the two supplied by applying the function to each equally-positioned pair in the lists. The returned list is truncated to the length of the shorter of the two input lists."
    }
  }
}
